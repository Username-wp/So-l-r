package com.pinyougou.search.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.solr.core.SolrTemplate;
import org.springframework.data.solr.core.query.Criteria;
import org.springframework.data.solr.core.query.GroupOptions;
import org.springframework.data.solr.core.query.HighlightOptions;
import org.springframework.data.solr.core.query.HighlightQuery;
import org.springframework.data.solr.core.query.Query;
import org.springframework.data.solr.core.query.SimpleHighlightQuery;
import org.springframework.data.solr.core.query.SimpleQuery;
import org.springframework.data.solr.core.query.result.GroupEntry;
import org.springframework.data.solr.core.query.result.GroupPage;
import org.springframework.data.solr.core.query.result.GroupResult;
import org.springframework.data.solr.core.query.result.HighlightEntry;
import org.springframework.data.solr.core.query.result.HighlightPage;

import com.alibaba.dubbo.config.annotation.Service;

import com.pinyougou.pojo.TbItem;
import com.pinyougou.search.service.ItemSearchService;

@Service(timeout = 3000)
public class ItemSearchServiceImpl implements ItemSearchService {

//按照关键字查询	
	@Autowired
	private SolrTemplate solrTemplate;
//	 	@Override 
//	 	public Map<String, Object> search(Map searchMap) { 
//	 		Map<String,Object> map=new HashMap<>(); 
//	 	 	Query query=new SimpleQuery("*:*"); 
//	 	 	//添加查询条件 
//	 	 	Criteria criteria=new Criteria("item_keywords").is(searchMap.get("keywords")); 
//	 	 	query.addCriteria(criteria); 
//	 	 	ScoredPage<TbItem> page = solrTemplate.queryForPage(query, TbItem.class);
//	 	 	map.put("rows", page.getContent()); 
//	 	 	
//	 	 	return map; 

//	}

	/**
	 * solr之如何设置高亮 根据关键字搜索列表
	 * 
	 * @param keywords
	 * @return
	 */
	@Override
	public Map<String, Object> search(Map searchMap) {
		Map map = new HashMap();
		
		// 1、查询列表
		map.putAll(searchList(searchMap));
		//2、分组查询 商品分类列表
		List<String> categoryList = searchCategoryList(searchMap);
		map.put("categoryList",categoryList);
		
		return map;
	}

	private Map searchList(Map searchMap) {
		Map map = new HashMap();
		HighlightQuery query = new SimpleHighlightQuery();
		HighlightOptions highlightOptions = new HighlightOptions().addField("item_title");// 设置高亮的域
		highlightOptions.setSimplePrefix("<em style='color:red'>");// 高亮前缀
		highlightOptions.setSimplePostfix("</em>");// 高亮后缀
		query.setHighlightOptions(highlightOptions);// 设置高亮选项

		// 按照关键字查询
		Criteria criteria = new Criteria("item_keywords").is(searchMap.get("keywords"));
		query.addCriteria(criteria);

		// 高亮页对象
		HighlightPage<TbItem> page = solrTemplate.queryForHighlightPage(query, TbItem.class);
		// 循环高亮入口集合(每条记录的高亮入口)
		List<HighlightEntry<TbItem>> entryList = page.getHighlighted();

		for (HighlightEntry<TbItem> h : entryList) {
			// 获取高亮列表(高亮域的个数)
			TbItem item = h.getEntity();
			if (h.getHighlights().size() > 0 && h.getHighlights().get(0).getSnipplets().size() > 0) {

				item.setTitle(h.getHighlights().get(0).getSnipplets().get(0));// 设置高亮的结果
			}
		}

		map.put("rows", page.getContent());
		return map;
	}
		
			/** 
		*查询分类列表   
		*@param searchMap 
		*@return 
			 	 */ 
	 	private  List<String> searchCategoryList(Map searchMap){ 
	 	 	List<String> list=new ArrayList(); 	 
	 	 	Query query=new SimpleQuery();  	 
	 	 	//按照关键字查询 
	 	 	Criteria criteria=new Criteria("item_keywords").is(searchMap.get("keywords")); 
	 	 	query.addCriteria(criteria); 
	 	 	//设置分组选项 
	 	 	GroupOptions groupOptions=new GroupOptions().addGroupByField("item_category"); 
	 	 	query.setGroupOptions(groupOptions); 
	 	 	//得到分组页 
	 	 	GroupPage<TbItem> page = solrTemplate.queryForGroupPage(query, TbItem.class); 
	 	 	//根据列得到分组结果集 
	 	 	GroupResult<TbItem> groupResult = page.getGroupResult("item_category"); 
	 	 	//得到分组结果入口页 
	 	 	Page<GroupEntry<TbItem>> groupEntries = groupResult.getGroupEntries(); 
	 	 	//得到分组入口集合 
	 	 	List<GroupEntry<TbItem>> content = groupEntries.getContent(); 
	 	 	
	 	 	for(GroupEntry<TbItem> entry:content){
	 			list.add(entry.getGroupValue());// 将分组结果的名称封装到返回值中
	 		}
	 	 	return list;

 	}

}
